<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
          "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
Based on Checkstyle's 'Google' configuration

Changes:
 * Use 4 spaces for indentation instead of 2.
 * Don't indent case statements inside switch.
 * Increased line length from 100 to 120.
 * Allow one character local variable names.
 * Allow sequences of 2+ uppercase letters in class names.
 * Removed import order check (I don't care).
 * Removed JavadocParagraph check (empty line before paragraph HTML tag in javadoc seems unnecessary)
 * Allow while-part of do/while on the same line as the '}'
 * Changed switch-case fallthrough relief pattern to the one Eclipse used ('$FALL-THROUGH$')
 * Don't require Javadoc for @Before/@After JUnit test methods.
[2017-01-29]
 * Removed enforced naming convention for generic type parameters.
 * Set severity level to INFO, to more easily distinguish between style issues (INFO) and code issues (WARN).
 * Allow max. 6 method/constructor parameters. I consider 1-4 to be fine, while 5-6 is a code smell. Methods
   with 7+ parameters are so hard to use, that I don't think you should ever write them.
 * Require Javadoc for all public methods. The Google configuration allows omitting Javadoc when the
   method/constructor is 1 (or 2, depending on the version) lines long. That doesn't make sense to me. Even
   if a method/constructor is trivial implementation-wise, user of your code still need to know what it does.
 * Require Javadoc for throws declarations. Knowing when a method throws an exception is very important.
 * Disallow catching Throwable. Doing that may accidentally ignore fatal VM errors.
[2017-02-03]
 * Allow inline tags in single-line Javadoc.
 * Ensure exceptions are immutable (MutableException check)
 * Don't require that the first Javadoc line ends with a period. That disallows Javadoc methods consisting of
   only an @ tag (like @see #setXyz).
 * Allow checkstyle suppression (SuppressionCommentFilter) for exceptional cases where complying to the
   existing checkstyle rules would be worse than leaving the 'violation'.
 [2017-02-07]
 * Don't require Javadoc for @BeforeClass/@AfterClass JUnit test methods.
 [2017-02-18]
 * Removed MissingSwitchDefault check due to the way it interacts with error-prone. Error-prone reasons that
   enum switches shouldn't have a default case, because then the static analysis can warn you when a new enum
   constant is added and it isn't explicitly handled. If you add a default case throwing an error, you'll get
   a runtime exception instead.
 [2017-09-02]
 * Changed ParameterName check to be compatible with Checkstyle 8
 [2017-12-21]
 * Removed maxLineLength from LeftCurly (attribute no longer supported by Checkstyle)
 * Removed FileContentsHolder element (no longer supported by Checkstyle)
 [2018-05-01]
 * Allow suppression using @SuppressWarnings annotation
 [2020-02-24]
 * Update for Checkstyle 8.28
 [2020-03-13]
 * Require Javadoc for public types
 [2022-02-19]
 * Update for Checkstyle 9.1
-->

<module name = "Checker">
    <property name="charset" value="UTF-8"/>
    <property name="severity" value="info"/>
    <property name="fileExtensions" value="java, properties, xml"/>

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <module name="TreeWalker">
        <module name="OuterTypeFilename"/>
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format" value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message" value="Avoid using corresponding octal or Unicode escape."/>
        </module>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>
        <module name="AvoidStarImport"/>
        <module name="OneTopLevelClass"/>
        <module name="NoLineWrap"/>
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>
        <module name="NeedBraces"/>
        <module name="LeftCurly"/>
        <module name="RightCurly"/>
        <module name="RightCurly">
            <property name="option" value="alone"/>
            <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <message key="ws.notFollowed"
             value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
             <message key="ws.notPreceded"
             value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="OneStatementPerLine"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="ArrayTypeStyle"/>
        <module name="FallThrough">
            <property name="reliefPattern" value="\$FALL-THROUGH\$" />
        </module>
         <module name="UpperEll"/>
        <module name="ModifierOrder"/>
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern"
             value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="TypeName">
            <message key="name.invalidPattern"
             value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MemberName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
             value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
             value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="CatchParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
             value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="allowOneCharVarInForLoop" value="true"/>
            <message key="name.invalidPattern"
             value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="NoFinalizer"/>
        <module name="GenericWhitespace">
            <message key="ws.followed"
             value="GenericWhitespace ''{0}'' is followed by whitespace."/>
             <message key="ws.preceded"
             value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
             <message key="ws.illegalFollow"
             value="GenericWhitespace ''{0}'' should followed by whitespace."/>
             <message key="ws.notPreceded"
             value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="0"/>
            <property name="throwsIndent" value="4"/>
            <property name="lineWrappingIndentation" value="8"/>
            <property name="arrayInitIndent" value="8"/>
            <property name="forceStrictCondition" value="false"/>
        </module>
        <module name="OverloadMethodsDeclarationOrder"/>
        <module name="VariableDeclarationUsageDistance"/>
        <module name="MethodParamPad"/>
        <module name="OperatorWrap">
            <property name="option" value="NL"/>
            <property name="tokens" value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF "/>
        </module>
        <module name="AnnotationLocation">
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>
        <module name="AnnotationLocation">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>
        <module name="NonEmptyAtclauseDescription"/>
        <module name="JavadocTagContinuationIndentation"/>
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
        <module name="JavadocMethod">
            <property name="accessModifiers" value="public"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="allowedAnnotations" value="Override, Test, Before, After, BeforeClass, AfterClass"/>
            <property name="tokens" value="METHOD_DEF, ANNOTATION_FIELD_DEF"/>
        </module>
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
            <message key="name.invalidPattern"
             value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="true"/>
        </module>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>
        <module name="CommentsIndentation"/>

<!-- Additional checks -->
        <module name="IllegalCatch">
            <property name="illegalClassNames" value="java.lang.Throwable"/>
        </module>
        <module name="ParameterNumber">
            <property name="max" value="6"/>
        </module>
        <module name="MissingJavadocType" />
        <module name="MutableException" />
        <module name="SuppressWarningsHolder" />
    </module>

    <module name="LineLength">
        <property name="max" value="120"/>
        <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>
    <module name="SuppressWarningsFilter" />
    <module name="SuppressionSingleFilter">
        <property name="checks" value="MissingJavadocType"/>

         <!-- Don't require class Javadoc for unit tests, test doubles -->
        <property name="files" value=".*(Test|Mock|Stub).java"/>
    </module>
</module>
