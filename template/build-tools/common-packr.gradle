
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // Plugin for creating runnable distributions (Win/Mac/Linux)
        classpath 'com.bladecoder.packr:packr:2.1' // 3rd party prerelease version
    }
}

// Disable dist tasks from 'distribution'/'shadow' plugin (we use packr instead)
tasks.distZip.enabled = false
tasks.distTar.enabled = false
tasks.shadowDistZip.enabled = false
tasks.shadowDistTar.enabled = false

import com.badlogicgames.packr.*

// Pack-all tasks that depends on each platform-specific pack task
def packrAll = tasks.register('packrAll')
assembleDist.dependsOn packrAll

class PackrExtension {
    def final platforms = [
        PackrConfig.Platform.Windows64,
        // PackrConfig.Platform.Windows32, // Should be obsolete
        PackrConfig.Platform.Linux64,
        // PackrConfig.Platform.Linux32, // Should be obsolete
        PackrConfig.Platform.MacOS,
    ].asImmutable()

    private final CopySpec resources;
    private final def outputFolder

    PackrExtension(project) {
        resources = project.copySpec()
        outputFolder = project.file("${project.buildDir}/packr")
    }

    public File getOutputFolder() {
        return outputFolder;
    }

    public CopySpec getResources() {
        return resources
    }

    public void resources(Action<? super CopySpec> action) {
        action.execute(resources)
    }
}

extensions.create('packr', PackrExtension, project)

class PackrTask extends Copy {
}

packr.platforms.each{ platform ->
    def platformId = platform.toString().toLowerCase(Locale.ROOT)

    def packrTask = tasks.register("packr${platform}", PackrTask) {
        group 'dist'

        destinationDir = file("${packr.outputFolder}/$platformId")

        doFirst {
            getDestinationDir().mkdirs();

            def jrePath = "${buildToolsDir}/jre/jre8-${platformId}.zip".toString()

            def vmArgs = []
            vmArgs += applicationDefaultJvmArgs
            if (platform == PackrConfig.Platform.MacOS) {
                vmArgs += ['XstartOnFirstThread'] // Required for LWJGL3
            }

            PackrConfig config = new PackrConfig()
            config.executable = shadowJar.baseName
            config.classpath = shadowJar.outputs.files.collect{ it.toString() }
            config.mainClass = mainClassName
            config.resources = [] // Resources have already been included using the packr.resource copySpec

            config.platform = platform
            config.outDir = getDestinationDir()
            config.bundleIdentifier = project.group + '.' + shadowJar.baseName // MacOS app bundle identifier
            config.iconResource = new File(vnResDir, 'icon.icns') // icon attribute is only used by MacOS platform

            config.jdk = jrePath
            config.minimizeJre = new File(buildToolsDir, 'minimize-jre.json')
            config.vmArgs = vmArgs

            new Packr().pack(config);
        }

        if (platform == PackrConfig.Platform.MacOS) {
            into('Contents/Resources') {
                from shadowJar
                with(packr.resources)
            }
        } else {
            from shadowJar
            with(packr.resources)
        } 
    }
    packrAll.configure {
        dependsOn packrTask
    }
}

def releaseDir = file("$buildDir/release")

tasks.register('cleanArtifacts', Delete) {
    delete releaseDir
}

tasks.register('archiveWindows64', Zip) {
    destinationDir = releaseDir
    archiveName = "${rootProject.name}-${version}-windows64.zip"
    from tasks['packrWindows64']
    into "${rootProject.name}-${version}"
}

tasks.register('archiveLinux64', Tar) {
    destinationDir = releaseDir
    archiveName = "${rootProject.name}-${version}-linux64.tgz"
    compression = Compression.GZIP
    from tasks['packrLinux64']
    into "${rootProject.name}-${version}"
    filesMatching('*.sh') {
        fileMode 0755 // Make shell scripts executable (existing file permissions are lost when building on Windows)
    }
}

tasks.register('archiveMacOS', Zip) {
    destinationDir = releaseDir
    archiveName = "${rootProject.name}-${version}-macos.zip"
    from tasks['packrMacOS']
    into "${rootProject.name}-${version}.app"
    filesMatching('**/Contents/MacOS/*') {
        fileMode 0755 // Main executable should be executable (existing file permissions are lost when building on Windows)
    }
}

def archiveArtifacts = tasks.register('archiveArtifacts') {
    dependsOn archiveWindows64
    dependsOn archiveLinux64
    dependsOn archiveMacOS
}
assembleDist.dependsOn archiveArtifacts
