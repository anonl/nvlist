
buildscript {
    repositories {
        mavenCentral()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
        mavenLocal()
    }
    dependencies {
        // Plugin for making a 'fat' JAR
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'

        // Plugins for Android
        classpath 'com.android.tools.build:gradle:4.0.0'

        // Plugins for iOS
        classpath 'com.mobidevelop.robovm:robovm-gradle-plugin:2.3.12'

        // NVList build tools
        classpath "nl.weeaboo.vn:nvlist-buildtools:${gradle.ext.settings.nvlistVersion}"
   }
}

// Copy properties from settings.gradle into project properties for convenience
allprojects {
    ext {
        vnRoot = gradle.ext.vnRoot
        vnRootDir = gradle.ext.vnRootDir
        vnResDir = gradle.ext.vnResDir
        buildResDir = gradle.ext.buildResDir
        buildToolsDir = gradle.ext.buildToolsDir
    }
}
def settings = gradle.ext.settings

allprojects {
    apply plugin: 'eclipse'

    group = settings.appPackage
    version = settings.appVersion

    ext {
        nvlistVersion = settings.nvlistVersion
        javaVersion = JavaVersion.VERSION_1_8
    }

    repositories {
        mavenCentral()
        mavenLocal()
    }

    // Set output folder relative to the vnRoot so multiple projects can
    buildDir = "${ext.vnRootDir}/build-out/${project.name}"

    plugins.withType(JavaPlugin) {
        sourceCompatibility = javaVersion
        compileJava.options.encoding = 'UTF-8'
        compileTestJava.options.encoding = 'UTF-8'
    }
}

project(':desktop') {
    apply from: "${buildToolsDir}/common-desktop.gradle"

    dependencies {
        compile "nl.weeaboo.vn:nvlist-desktop:$nvlistVersion"
    }

    mainClassName = settings.desktopMain
}

project(':android') {
    if (!settings.androidEnabled.toBoolean()) {
        return
    }

    apply plugin: 'com.android.application'

    apply from: "${buildToolsDir}/common-android.gradle"

    dependencies {
        compile("nl.weeaboo.vn:nvlist-android:$nvlistVersion@aar") {
            transitive = true
        }
    }

    android {
        signingConfigs {
            release {
                keyAlias  settings.keyAlias
                keyPassword  settings.keyPassword
                storeFile new File(buildResDir, settings.keyStoreFile)
                storePassword settings.keyStorePassword
            }
        }

        defaultConfig {
            applicationId settings.appPackage
            versionCode settings.androidVersionCode as int
            versionName project.version
            manifestPlaceholders = [
                androidMain: settings.androidMain
            ]
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }

    // Run installed app through adb
    tasks.register('runInstalled', Exec) {
        def adb = android.getAdbExe()
        def target = settings.appPackage + '/' + settings.androidMain
        commandLine "$adb", 'shell', 'am', 'start', '-n', target
    }
    // Install, then run debug build
    tasks.register('runDebug') {
        dependsOn('installDebug', 'runInstalled')
    }
    // Install, then run release build
    tasks.register('runRelease') {
        dependsOn('installRelease', 'runInstalled')
    }
}

project(':ios') {
    if (!settings.iosEnabled.toBoolean()) {
        return
    }

    apply from: "${buildToolsDir}/common-ios.gradle"

    dependencies {
        compile "nl.weeaboo.vn:nvlist-desktop:$nvlistVersion"
    }

    ext.mainClassName = settings.iosMain
}

configurations {
    buildtools { }
    langserver { }
}

dependencies {
    buildtools "ch.qos.logback:logback-classic:1.2.3"
    langserver "nl.weeaboo.vn:nvlist-langserver:$nvlistVersion"
}

// To run against a local prerelease version:
// gradlew --PvnRoot=.. --include-build=../..
task runLanguageServer(type: JavaExec) {
    classpath = files(configurations.langserver)
    main = 'nl.weeaboo.vn.langserver.LangServerMain'
    args (findProperty('args') ?: '')
    workingDir project.ext.vnRootDir
}

task optimizeResources(type: JavaExec) {
    // Optimizer config is stored in build-res/optimizer.json
    def configFile = new File(buildResDir, 'optimizer.json')
    inputs.file(configFile)

    def outputFolder = new File(project.ext.vnRootDir, 'res-optimized')
    outputs.dir(outputFolder)

    // Setup to launch the resource optimizer
    classpath = configurations.buildtools + buildscript.configurations.classpath
    main = 'nl.weeaboo.vn.buildtools.optimizer.ResourceOptimizerLauncher'
    args = [project.ext.vnRootDir, buildToolsDir]
    workingDir project.ext.vnRootDir

    doFirst {
        // Delete the output folder first
        delete(outputFolder)
    }
}
