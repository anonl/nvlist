
buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        // Plugins for Android
        classpath 'com.android.tools.build:gradle:4.0.0'

        // Plugins for iOS
        classpath 'com.mobidevelop.robovm:robovm-gradle-plugin:2.3.12'
    }
}

plugins {
    // Google error-prone
    id 'net.ltgt.errorprone' version '1.1.1' apply false

    // Plugin used for reporting on the licenses of third-party dependencies
    id 'com.github.hierynomus.license' version '0.14.0'

    // Java Microbenchmark Harness plugin
    id 'me.champeau.gradle.jmh' version '0.4.6' apply false

    // Plugin for making a 'fat' JAR
    id 'com.github.johnrengelman.shadow' version '5.1.0'

    // Public API change detection
    id 'me.champeau.gradle.japicmp' version '0.2.5'

    // Mutation testing
    id 'info.solidsoft.pitest' version '1.4.0' apply false
}

apply from: 'dependencies.gradle'

def templateDir = file('template').getAbsoluteFile()

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'

    group = 'nl.weeaboo.vn'
    version = '4.10.0'
    ext {
        javaVersion = 8
        nvlistVersion = version

        vnRootDir = rootProject.file(project.findProperty('vnRoot') ?: templateDir)
        vnResDir = new File(vnRootDir, 'res')
        buildResDir = new File(templateDir, 'build-res') 
        buildToolsDir = new File(templateDir, 'build-tools') 
    }

    repositories {
        mavenCentral()
        maven { url 'https://repo.gradle.org/gradle/libs-releases' } // For Gradle tooling API
    }

    plugins.withType(JavaPlugin) {
        project.apply plugin: 'java-test-fixtures'

        sourceCompatibility = javaVersion

        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
        }

        sourceSets {
            main {
                resources {
                    // Add additional resource dir for .lua/.lvn scripts
                    srcDir 'src/main/lua'
                }
            }
            test {
                resources {
                    // Add additional resource dir for .lua/.lvn scripts
                    srcDir 'src/test/lua'
                }
            }
        }

        dependencies {
            compileOnly deps.static_analysis_annotations

            implementation deps.slf4j_api

            testFixturesApi deps.junit
            testFixturesApi deps.guava_testlib

            // gdx-test is a required dependency since it contains the GdxUiTest test category
            testFixturesApi (deps.gdx_test) {
                // Ignore transitive libGDX dependencies (to prevent version conflicts)
                exclude group: 'com.badlogicgames.gdx'
            }
        }

        test {
            // Change temp dir (default doesn't work in GitHub actions when running on Windows)
            systemProperty 'java.io.tmpdir', file("$buildDir/tmp")

            testLogging {
                // showStandardStreams true
                exceptionFormat = 'full'                
            }

            def uiTest = project.hasProperty('uiTest')
            inputs.property('uiTest', uiTest) // Re-execute task if uiTest property changes
            useJUnit {
                if (!uiTest) {
                    // Exclude UI tests by default
                    excludeCategories 'nl.weeaboo.gdx.test.junit.GdxUiTest'
                }
            }
        }

        jacocoTestReport {
            reports {
                xml.enabled true
            }
        }

        javadoc {
            options {
                noDeprecatedList = true
                noHelp = true
                noIndex = true
                noTimestamp = true

                addBooleanOption('Xdoclint:all,-missing', true)
            }
        }

        eclipse.classpath.file.whenMerged {
            entries.each { entry ->
                if (entry.kind == 'src' && entry.path.contains('/gen/')) {
                    // Ignore warnings in generated code
                    entry.entryAttributes['ignore_optional_problems'] = 'true'
                }
            }
        }

        project.apply from: rootProject.file('errorprone.gradle')
        project.apply from: rootProject.file('pitest.gradle')
        project.apply from: rootProject.file('jmh.gradle')
        project.apply from: rootProject.file('publish.gradle')
    }
}

apply from: "$buildToolsDir/common.gradle"

dependencies {
    buildtools project(':nvlist-buildtools') 
}
